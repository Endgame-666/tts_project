import asyncio
import logging
import random
import sys
import hashlib
import json
import os

# aiogram
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from aiogram.types import FSInputFile
from aiogram import F

# files
from bot.loading_messages import LoadingMessageManager
from bot.main_keyboard import get_main_keyboard
from bot.settings import BOT_TOKEN
from bot.filters import *
from TTS.tts import get_voice
from backend.database.user_db import DatabaseManager
from bot.texts import *

db_manager = DatabaseManager()
dp = Dispatcher()
router = Router()
dp.include_router(router)

@router.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = get_main_keyboard()
    await message.answer(welcome_message(message), reply_markup=keyboard)


@router.message(F.web_app_data.is_not(None))
async def new_message_request(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å mini app –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–µ"""
    web_data = message.web_app_data.data if message.web_app_data else None
    if web_data:
        try:
            data = json.loads(web_data)
            character_id = data.get('characterId', 0)

            await state.update_data(character_id=character_id)
            await state.set_state(MessageStates.waiting_for_message_request)

            response = (
                f"üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üé≠\n"
                f"üéØ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂: <b>{CHARACTER_NAMES.get(character_id, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂')}</b>\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–∑–≤—É—á–∫—É! üéôÔ∏è\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å‚úçÔ∏è"
            )

        except json.JSONDecodeError:
            response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
    else:
        response = didnt_choose_text
    await message.answer(response)



def generate_safe_id(input_string: str) -> str:
    return hashlib.md5(input_string.encode()).hexdigest()

@router.message(F.text == buttons["favorite_messages"] )
async def get_favorites(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    user_data = await db_manager.get_user(user_id)

    if not user_data or not user_data["favourite_messages"]:
        await message.answer(no_favorite_list_text)
        return

    await message.answer(favorite_list_text)
    favourites = user_data["favourite_messages"]
    for audio_path in favourites:
        try:
            folder_name = os.path.basename(os.path.dirname(audio_path))
            file = FSInputFile(audio_path)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text=del_from_favorites_text,
                    callback_data=MessageCallback(
                        action="del",
                        message_file=folder_name
                    ).pack()
                )
            )

            await message.answer_audio(
                audio=file,
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ")

    await message.answer(favorite_list_end_text)


@router.message(F.text == buttons["random_voice"])
async def process_message_request_random(message: Message, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º"""
    character_id = random.randint(1, 12)
    await state.update_data(character_id=character_id)
    await state.set_state(MessageStates.waiting_for_message_request)
    response = (
        f"üé∞ –†—É–ª–µ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤! üé≠\n"
        f"üéâ –í–∞–º –ø–æ–ø–∞–ª—Å—è: <b>{CHARACTER_NAMES.get(character_id, '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å')}</b>\n"
        f"üîä –ü–æ–≥–Ω–∞–ª–∏ –æ–∑–≤—É—á–∏–≤–∞—Ç—å! –ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è üéôÔ∏è‚û°Ô∏èüîÆ"
    )
    await message.answer(response)


@router.message(StateFilter(MessageStates.waiting_for_message_request))
async def process_message_request(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º"""
    loading_manager = LoadingMessageManager()
    loading_message = await message.answer(start_working_text)
    await loading_manager.start(loading_message)

    data = await state.get_data()
    character_id = data.get("character_id", 0)

    try:
        user_id = message.from_user.id
        message_text = message.text

        audio = get_voice(character_id, message_text)[2]
        audio_path = fr"{audio}"
        voice_file = FSInputFile(audio_path)

        folder_name = os.path.basename(os.path.dirname(audio_path))
        message_id = generate_safe_id(audio_path)
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text=add_to_favorite_text,
                callback_data=MessageCallback(action="add", message_file=folder_name).pack()
            )
        )

        await asyncio.sleep(3)
        await loading_manager.stop()
        await message.answer_voice(voice=voice_file, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()



@router.callback_query(MessageCallback.filter(F.action == "add"))
async def add_to_favorites(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if callback.data.split(":")[1] == "add":
        user_id = callback.from_user.id
        try:
            message_file = callback.data.split(":")[2]
        except IndexError:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        file = fr"C:\Users\–í–∞–¥–∏–º\AppData\Local\Temp\gradio\{message_file}\audio.wav"

        user_data = await db_manager.get_user(user_id)
        if not user_data:
            user_name = callback.from_user.full_name or "Unknown"
            added = await db_manager.add_user(user_id, user_name)
            if not added:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            user_data = await db_manager.get_user(user_id)

        favourites = user_data["favourite_messages"]

        if len(favourites) >= 5 and file not in favourites:
            await callback.answer(limit_favorite_text)
            return

        if file in favourites:
            await callback.answer(already_in_favorite_text)
            return

        try:
            await db_manager.update_favourite_messages(user_id, file)
            await callback.answer(favorite_msg_done_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")




@router.callback_query(MessageCallback.filter(F.action == "del"))
async def remove_from_favorites(
        callback: CallbackQuery,
        callback_data: MessageCallback
):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = callback.from_user.id
    user_data = await db_manager.get_user(user_id)
    file_id = callback_data.message_file
    target_path = fr"C:\Users\–í–∞–¥–∏–º\AppData\Local\Temp\gradio\{file_id}\audio.wav"

    await db_manager.remove_from_favourites(user_id, target_path)
    await callback.answer(deleted_from_favorite_text)
    await callback.message.delete()

@router.message()
async def handle_unknown(message: Message):
    """–ö–æ–≥–¥–∞ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏"""
    await message.answer(didnt_choose_text)

async def main() -> None:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
