import random
import asyncio
from aiogram.types import Message

loading_messages = [
    "üîç –ò—â—É –ª—É—á—à–∏–µ –≥–æ–ª–æ—Å–∞...",
    "üìù –ü–æ–¥–±–∏—Ä–∞—é —Ç–æ–Ω—ã...",
    "‚öñÔ∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω—É...",
    "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã...",
    "üí° –ü–æ–¥–±–∏—Ä–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
    "‚≠êÔ∏è –í—ã–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...",
    "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
]

def get_random_loading_message() -> str:
    return random.choice(loading_messages)

class LoadingMessageManager:
    def __init__(self, message: Message):
        self.message = message
        self.is_running = True
        self.task = None
        self.current_operation = "üîç –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞..."

    async def update_loading_message(self):
        while self.is_running:
            try:
                loading_text = get_random_loading_message()
                if not loading_text.endswith('...'):
                    loading_text += '...'
                await self.message.edit_text(loading_text)
            except Exception as e:
                print(f"Error updating loading message: {e}")
            finally:
                if self.is_running:
                    await asyncio.sleep(1)

    async def start(self):
        self.task = asyncio.create_task(self.update_loading_message())
        return self.task

    async def stop(self):
        self.is_running = False
        if self.task and not self.task.done():
            try:
                self.task.cancel()
                await self.task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                print(f"Error stopping loading message task: {e}")